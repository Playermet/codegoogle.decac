module highorder

import list

generic Sequence map(s @Sequence or null,f)

method map(s @list.List or null,f) {
	let(l list.List:= s)
		list.cons(f(list.car(l)),map(list.cdr(l),f))
	else
		null
}

generic Sequence filter(s @Sequence or null,p?)

method filter(s @list.List or null,p?) {
	let(l list.List:= s)
		cond {
			case(p?(l.element) = true)
				list.cons(list.car(l),filter(list.cdr(l),p?))
			case(true)
				filter(list.cdr(l),p?)
		}
	else
		null
}

generic Sequence fold(s @Sequence or null,f,base)

method fold(s @list.List or null,f,base) {
	let(l list.List:= s)
		f(car(l),fold(cdr(l),f,base))
	else
		base
}

function copy_list(s) {
	fold(s,function(x,y) { list.cons(x,y) },null)
}

end
